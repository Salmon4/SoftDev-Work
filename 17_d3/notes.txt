Let's Make a Bar Chart, Part 1

You can select a group of elements called a selection in D3 but not basic
JavaScript.
  ex: const p = d3.selectAll("p")
Chaining allows application of multiple operations to the same element:
  ex: d3.create("span")
        .style("color", "white")
        .style("background-color", "black")
  An alternative is to store the selection in a local variable and repeat the
  operation
A bar chart can be coded without JavaScript but it is impractical.
          html`<div style="font: 10px sans-serif; text-align: right; color: white;">
            <div style="background: steelblue; padding: 3px; margin: 1px; width: 40px;">4</div>
            <div style="background: steelblue; padding: 3px; margin: 1px; width: 80px;">8</div>
            <div style="background: steelblue; padding: 3px; margin: 1px; width: 150px;">15</div>
            <div style="background: steelblue; padding: 3px; margin: 1px; width: 160px;">16</div>
            <div style="background: steelblue; padding: 3px; margin: 1px; width: 230px;">23</div>
            <div style="background: steelblue; padding: 3px; margin: 1px; width: 420px;">42</div>
          </div>`

The D3 way (using data join) to make a bar chart broken into parts is:
          {
            // Create an empty (detached) chart container.
            const div = d3.create("div");

            // Apply some styles to the chart container.
            div.style("font", "10px sans-serif");
            div.style("text-align", "right");
            div.style("color", "white");

            // Define the initial (empty) selection for the bars.
            const bar = div.selectAll("div");

            // Bind this selection to the data (computing enter, update and exit).
            const barUpdate = bar.data(data);

            // Join the selection and the data, appending the entering bars.
            const barNew = barUpdate.join("div");

            // Apply some styles to the bars.
            barNew.style("background", "steelblue");
            barNew.style("padding", "3px");
            barNew.style("margin", "1px");

            // Set the width as a function of data.
            barNew.style("width", d => `${d * 10}px`);

            // Set the text of each bar as the data.
            barNew.text(d => d);

            // Return the chart container.
            return div.node();
          }

which is the shortened version of:
          {
            const div = d3.create("div")
                .style("font", "10px sans-serif")
                .style("text-align", "right")
                .style("color", "white");

            div.selectAll("div")
              .data(data)
              .join("div")
                .style("background", "steelblue")
                .style("padding", "3px")
                .style("margin", "1px")
                .style("width", d => `${d * 10}px`)
                .text(d => d);

            return div.node();
          }

The number used to scale the data is 10 but depends on the domain of the data
in which in the case given is 42.
Dependencies can be explicit by using a linear scape where D3 scales map a
domain of data to a range of visual variable such as position.
Ex:
          x = f(n)
          x = d3.scaleLinear()
              .domain([0, d3.max(data)])
              .range([0, 420])

          x(4) --> 40 #bar with data value 4
          x(16) --> 160

          .style("width", d => `${d * 10}px`) can be replaced with:
          .style("width", d => `${x(d)}px`)







D3 by example

Given a set of numbers:
        values = [-1.21, -1.02, 0.61, 0.99, -1.53]
You can make a histogram by importing the histogram example and using the "with"
clause to add our set of numbers as the histogram data.
        import {chart as chart1} from @d3/histogram
        import {chart as chart1} with {values as data} from "@d3/histogram"
Height can be adjusted as well:
        import {chart as chart1} with {values as data, height} from "@d3/histogram"
